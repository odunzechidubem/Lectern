import asyncHandler from 'express-async-handler';
import User from '../models/userModel.js';
import Course from '../models/courseModel.js';
import Submission from '../models/submissionModel.js';
import generateToken from '../utils/generateToken.js';
import sendEmail from '../utils/sendEmail.js';
import crypto from 'crypto';

const registerUser = asyncHandler(async (req, res) => { const { name, email, password, role } = req.body; const userExists = await User.findOne({ email }); if (userExists) { res.status(400); throw new Error('User already exists'); } const user = await User.create({ name, email, password, role }); if (user) { const verificationToken = user.createVerificationToken(); await user.save({ validateBeforeSave: false }); const verifyUrl = `${req.protocol}://${req.get('host')}/api/users/verify/${verificationToken}`; const message = `<p>Please verify your email by clicking on the link below:</p><p><a href="${verifyUrl}">${verifyUrl}</a></p>`; try { await sendEmail({ email: user.email, subject: 'LMS Email Verification', html: message }); res.status(201).json({ message: 'Registration successful. Please check your email to verify your account.' }); } catch (err) { await User.findByIdAndDelete(user._id); res.status(500); throw new Error('Email could not be sent. Please try again.'); } } else { res.status(400); throw new Error('Invalid user data'); } });
const authUser = asyncHandler(async (req, res) => { const { email, password } = req.body; const user = await User.findOne({ email }); if (!user || !(await user.matchPassword(password))) { res.status(401); throw new Error('Invalid email or password'); } if (!user.isVerified) { res.status(403); throw new Error('Please verify your email before logging in.'); } generateToken(res, user._id); res.json({ _id: user._id, name: user.name, email: user.email, role: user.role, profileImage: user.profileImage }); });
const verifyEmail = asyncHandler(async (req, res) => { const verificationToken = crypto.createHash('sha256').update(req.params.token).digest('hex'); const user = await User.findOne({ verificationToken, verificationTokenExpires: { $gt: Date.now() } }); if (!user) { res.status(400); throw new Error('Invalid or expired verification token.'); } user.isVerified = true; user.verificationToken = undefined; user.verificationTokenExpires = undefined; await user.save(); res.status(200).send('<h1>Email Verified</h1><p>Your email has been successfully verified. You can now close this tab and log in.</p>'); });
const logoutUser = (req, res) => { res.cookie('jwt', '', { httpOnly: true, expires: new Date(0) }); res.status(200).json({ message: 'Logged out successfully' }); };
const getEnrolledCourses = asyncHandler(async (req, res) => { const courses = await Course.find({ students: req.user._id }).populate('lecturer', 'name'); res.status(200).json(courses); });
const getMySubmissions = asyncHandler(async (req, res) => { const submissions = await Submission.find({ student: req.user._id }).populate({ path: 'course', select: 'title' }).populate({ path: 'assignment', select: 'title' }).sort({ createdAt: -1 }); res.status(200).json(submissions); });
const forgotPassword = asyncHandler(async (req, res) => { const user = await User.findOne({ email: req.body.email }); if (!user) { return res.status(200).json({ message: 'If an account with that email exists, a password reset link has been sent.' }); } const resetToken = user.createPasswordResetToken(); await user.save({ validateBeforeSave: false }); const resetUrl = `${process.env.FRONTEND_URL || 'http://localhost:5173'}/reset-password/${resetToken}`; const message = `<p>You requested a password reset. Please click the link below to reset your password:</p><p><a href="${resetUrl}">${resetUrl}</a></p><p>This link will expire in 10 minutes.</p>`; try { await sendEmail({ email: user.email, subject: 'LMS Password Reset Request', html: message }); res.status(200).json({ message: 'If an account with that email exists, a password reset link has been sent.' }); } catch (err) { user.passwordResetToken = undefined; user.passwordResetExpires = undefined; await user.save({ validateBeforeSave: false }); res.status(500); throw new Error('Email could not be sent. Please try again later.'); } });
const resetPassword = asyncHandler(async (req, res) => { const hashedToken = crypto.createHash('sha256').update(req.params.token).digest('hex'); const user = await User.findOne({ passwordResetToken: hashedToken, passwordResetExpires: { $gt: Date.now() } }); if (!user) { res.status(400); throw new Error('Token is invalid or has expired.'); } user.password = req.body.password; user.passwordResetToken = undefined; user.passwordResetExpires = undefined; await user.save(); res.status(200).json({ message: 'Password reset successful. You can now log in.' }); });
const getUserProfile = asyncHandler(async (req, res) => { const user = await User.findById(req.user._id); if (user) { res.json({ _id: user._id, name: user.name, email: user.email, role: user.role, profileImage: user.profileImage }); } else { res.status(404); throw new Error('User not found'); } });
const updateUserProfile = asyncHandler(async (req, res) => { const user = await User.findById(req.user._id); if (user) { user.name = req.body.name || user.name; user.email = req.body.email || user.email; user.profileImage = req.body.profileImage || user.profileImage; const updatedUser = await user.save(); res.json({ _id: updatedUser._id, name: updatedUser.name, email: updatedUser.email, role: updatedUser.role, profileImage: updatedUser.profileImage }); } else { res.status(404); throw new Error('User not found'); } });
const changeUserPassword = asyncHandler(async (req, res) => { const { currentPassword, newPassword } = req.body; const user = await User.findById(req.user._id); if (user && (await user.matchPassword(currentPassword))) { user.password = newPassword; await user.save(); res.json({ message: 'Password changed successfully' }); } else { res.status(401); throw new Error('Invalid current password'); } });
const deleteUserAccount = asyncHandler(async (req, res) => { const user = await User.findById(req.user._id); if (user) { await user.deleteOne(); res.cookie('jwt', '', { httpOnly: true, expires: new Date(0) }); res.json({ message: 'Account deleted successfully' }); } else { res.status(404); throw new Error('User not found'); } });

export { registerUser, authUser, logoutUser, verifyEmail, getEnrolledCourses, getMySubmissions, forgotPassword, resetPassword, getUserProfile, updateUserProfile, changeUserPassword, deleteUserAccount };